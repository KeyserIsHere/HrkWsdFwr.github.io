.include types

.define utf8_first_byte_mark_1, 0x00
.define utf8_first_byte_mark_2, 0xc0
.define utf8_first_byte_mark_3, 0xe0
.define utf8_first_byte_mark_4, 0xf0

.define utf8_continuation_byte_mark, 0x80

.macro char, x24, x16, x8, x0
    .if x24 == 0
        .if x16 == 0
            .if x8 == 0
                .if x0 <= 0x7f
                    .byte utf8_first_byte_mark_1 | x0
                .else
                    .byte utf8_first_byte_mark_2 | x8 | (x0 >> 6)
                    .byte utf8_continuation_byte_mark | (x0 & 0x3f)
                .endif
            .elseif x8 <= 0x07
                .byte utf8_first_byte_mark_2 | x8 | (x0 >> 6)
                .byte utf8_continuation_byte_mark | (x0 & 0x3f)
            .else
                .byte utf8_first_byte_mark_3 | (x8 >> 4)
                .byte utf8_continuation_byte_mark | ((x8 & 0x0f) << 2) | (x0 >> 6)
                .byte utf8_continuation_byte_mark | (x0 & 3f)
            .endif
        .elseif x16 <= 0x10
            .byte utf8_first_byte_mark_4 | (x16 >> 2)
            .byte utf8_continuation_byte_mark | ((x16 & 0x03) << 4) | (x8 >> 4)
            .byte utf8_continuation_byte_mark | ((x8 & 0x0f) << 2) | (x0 >> 6)
            .byte utf8_continuation_byte_mark | (x0 & 0x3f)
        .else
            .error "UTF-32 character (%0, %1, %2, %3) out of range (U+0000 - U+10FFFF)", x24, x16, x8, x0
        .endif
    .else
        .error "UTF-32 character (%0, %1, %2, %3) out of range (U+0000 - U+10FFFF)", x24, x16, x8, x0
    .endif
.endm

.macro char, x16, x8, x0
    char 0, x16, x8, x0
.endm

.macro char, x8, x0
    char 0, x8, x0
.endm

.macro char, x0
    char 0, x0
.endm

.macro layer, x
    .assert x <= 7, "Layer must not exceed max layer count"
    .byte 0x80 | x
.endm

.macro cursor, x, y
    .byte 0x88 | 0, x, y
.endm

.define animation_filter_rrrrrrrr, 0
.define animation_filter_rxrxrxrx, 1
.define animation_filter_rrxxrrxx, 2
.define animation_filter_rrrrxxxx, 3

.macro cursor_visibility, palette_page, palette_offset, bold, italic, animation_filter, animation_offset, char24, char16, char8, char0
    .assert palette_page < 8, "palette_page must be from 0 to 7"
    .assert animation_offset < 8, "animation_offset must be from 0 to 7"
    .assert animation_filter < 4, "animation_filter must be one of the 4 (0 to 3) filter modes"
    .assert (char24 == 0) && (char16 <= 0x10), "UTF-32 character must not be out of range (U+0000 - U+10FFFF)"

    .byte 0x88 | 1, palette_offset, (palette_page << 4) | (!!bold << 3) | animation_offset, (!!italic << 7) | (animation_filter << 5) | char16, char8, char0
.endm

.macro cursor_visibility, palette_page, palette_offset, bold, italic, animation_filter, animation_offset, char16, char8, char0
    cursor_visibility palette_page, palette_offset, bold, italic, animation_filter, animation_offset, 0, char16, char8, char0
.endm

.macro cursor_visibility, palette_page, palette_offset, bold, italic, animation_filter, animation_offset, char8, char0
    cursor_visibility palette_page, palette_offset, bold, italic, animation_filter, animation_offset, 0, char8, char0
.endm

.macro cursor_visibility, palette_page, palette_offset, bold, italic, animation_filter, animation_offset, char0
    cursor_visibility palette_page, palette_offset, bold, italic, animation_filter, animation_offset, 0, char0
.endm

.macro cursor_bounds, x, y, width, height
    .byte 0x88 | 2, x, y, width, height
.endm

.macro cursor_control, index, program, char24, char16, char8, char0
    .assert index < 16, "index must be from 0 to 15"
    .assert program < 16, "program must be from 0 to 15"
    .assert (char24 == 0) && (char16 <= 0x10), "UTF-32 character must not be out of range (U+0000 - U+10FFFF)"

    .byte 0x88 | 3, (index << 4) | program, char16, char8, char0
.endm

.macro cursor_control, index, program, char16, char8, char0
    cursor_control index, program, 0, char16, char8, char0
.endm

.macro cursor_control, index, program, char8, char0
    cursor_control index, program, 0, char8, char0
.endm

.macro cursor_control, index, program, char0
    cursor_control index, program, 0, char0
.endm

.macro cursor_origin, x, y
    .assert x <= 1, "x must be either 0 or 1"
    .assert y <= 1, "y must be either 0 or 1"

    .byte 0x88 | (x << 1) | y
.endm

.macro cursor_advance, enable
    .if enable
        .byte 0x90 | 1
    .else
        .byte 0x90 | 0
    .endif
.endm

.macro cursor_advance_source, width, height
    .assert (width >= -8) || (width <= 7), "width source multiplier must be in range -8 to 7"
    .assert (height >= -8) || (height <= 7), "height source multiplier must be in range -8 to 7"

    .byte 0x90 | 2

    .if width <= 7
        nibble width
    .else
        nibble -width
    .endif

    .if height <= 7
        nibble height
    .else
        nibble -height
    .endif
.endm

.macro cursor_advance_offset, x, y
    .byte 0x90 | 3, x, y
.endm

.macro cursor_wrap, enable
    .if enable
        .byte 0x90 | 5
    .else
        .byte 0x90 | 4
    .endif
.endm

.macro cursor_wrap_source, width, height
    .assert (width >= -8) || (width <= 7), "width source multiplier must be in range -8 to 7"
    .assert (height >= -8) || (height <= 7), "height source multiplier must be in range -8 to 7"

    .byte 0x90 | 6

    .if width <= 7
        nibble width
    .else
        nibble -width
    .endif

    .if height <= 7
        nibble height
    .else
        nibble -height
    .endif
.endm

.macro cursor_wrap_offset, x, y
    .byte 0x90 | 7, x, y
.endm

.define left, 0
.define right, 1
.define up, 2
.define down, 3
.define word_start, 4
.define word_end, 5
.define line_start, 6
.define line_end, 7

.macro move_cursor, position
    .assert position <= 7, "position must be one of: left, right, up, down, word_start, word_end, line_start, line_end"

    .byte 0x98 | position
.endm

.macro animation_offset, offset
    .assert offset < 8, "offset must be from 0 to 7"

    .byte 0xa0 | offset
.endm

.macro animation_filter, filter
    .assert filter < 4, "filter must be one of the 4 (0 to 3) filter modes"

    .byte 0xa8 | filter
.endm

.define attribute_modifier_preserve_style_animation_palette, 0
.define attribute_modifier_preserve_style_animation_modify_palette, 1
.define attribute_modifier_preserve_style_palette_modify_animation, 1
.define attribute_modifier_modify_style_animation_palette, 3

.macro referenced_attribute_modifier, modifier
    .assert modifier < 4, "modifier must be one of the 4 (0 to 3) attribute modifier modes"

    .byte 0xa8 | (modifier + 4)
.endm

.macro palette_page, page
    .assert page < 8, "page must be from 0 to 7"

    .byte 0xb0 | page
.endm

.macro palette_offset, offset
    .byte 0xb8 | 0, offset
.endm

.macro palette_colour, page, index, colour
    .assert page < 8, "page must be from 0 to 7"

    .byte 0xb8 | 1, page, index, colour
.endm

.macro palette_color, page, index, color
    palette_colour page, index, color
.endm

.macro bold, enable
    .if enable
        .byte 0xb8 | 3
    .else
        .byte 0xb8 | 2
    .endif
.endm

.macro italic, enable
    .if enable
        .byte 0xb8 | 5
    .else
        .byte 0xb8 | 4
    .endif
.endm

.macro italic_slope, slope
    .assert slope < 8, "slope must be from 0 to 7"

    .byte 0xb8 | 6, slope
.endm

.macro program, id, size
    .assert id < 16, "id must be from 0 to 15"

    .byte 0xb8 | 7, id, size
.endm

.define insert, 0
.define overwrite, 1

.macro draw_mode, mode
    .assert mode <= 1, "mode must be one of the 2 (0 to 1) draw modes"

    .byte 0xf8 | mode
.endm

.macro clear, width, height
    .byte 0xf8 | 2, width, height
.endm

.macro reference, x, y, width, height, layer
    .assert layer < 8, "layer must be from 0 to 7"

    .byte 0xf8 | 3, x, y, width, height, layer
.endm

.define modify_attribute_modifier, (1 << 0)
.define modify_animation_filter, (1 << 1)
.define modify_animation_offset, (1 << 2)
.define modify_italic, (1 << 3)
.define modify_bold, (1 << 4)
.define modify_palette_page, (1 << 5)
.define modify_palette_index, (1 << 6)

.macro cell, modify, width, height
    .byte 0xf8 | 4, modify, width, height, layer
.endm

.macro bitmap, width, height, palette_size, frames, char24, char16, char8, char0
    .assert width < 16, "width must be from 0 to 15"
    .assert height < 16, "height must be from 0 to 15"
    .assert palette_size < 8, "palette_size must be from 0 to 7"
    .assert frames < 8, "frames must be from 0 to 7"

    .byte 0xf8 | 5, (width << 4) | height, (palette_size << 3) | frames, char16, char8, char0
.endm

.macro viewport, port, x, y, width, height
    .byte 0xf8 | 6, port, x, y, width, height
.endm

.macro next_frame
    .byte 0xf8 | 7
.endm
