# Broadcast Node Receiver
# Receives packets from the transceiver and stores them in a buffer for later
# processing.
#
# This is intended to be a standalone program that runs indefinitely.
# ----------------------------------Defines----------------------------------
# Define: buffer_count:
# As the number of buffers that are connected to it. Maximum this can be is
# 127.
# -----------------------------------Ports-----------------------------------
# Port(0): packet_processor:
# Is the port to the device that will be reading from the buffers. The device
# should be connected to the buffers in the same order that this program is.
# The device will be sent an empty message when it should start reading from
# the next buffer ((index + 1) % count).
#
# Port(1): transceiver:
# Is the port that gets a packet from a transceiver module. This should be
# set to the appropriate port/channel it should be using.
#
# Port(2 - 128): buffer_start:
# Is the port connected to the buffer's 'buffer_in' port. 'buffer_count - 1'
# ports should be connected to each buffer from this initial port (starting
# from 2, up to 128).
#
# Port(129 - 255): buffer_control_start:
# Is the port connected to the buffer's 'buffer_control' port.
# 'buffer_count - 1' ports should be connected to each buffer from this
# initial port (starting from 129, up to 255). The connections should be in
# the same order as 'buffer_start'. A buffer at port 129 should be the same
# one connected to port 2.
#

.define packet_processor, 0
.define transceiver, 1
.define buffer_start, 2
.define buffer_control_start, 129

.assert (buffer_count >= 1) && (buffer_count <= 127), "the number of 'buffers' connected must be between 1 and 127"

.entrypoint
    mov r0, transceiver
    mov r2, buffer_start
    mov r3, buffer_control_start
listen:
    mov r1, [processing]
    and [waiting + r1], 1
    jz receive
    recv r3, [r0]
    jz send
    mov [waiting + r1], 0
empty_buffer_notification:
    send packet_processor
    jz empty_buffer_notification
    add r1, 1
    umod r1, buffer_count
    mov [processing], r1
receive:
    recv r0, [packet]
    jz listen
send:
    send r2, 1, [packet]
    jnz listen
    recv r3, [r0]
    jz send
    mov r1, [buffer]
    xor [waiting + r1], 1
    jnz next_buffer
empty_buffer_notification:
    send packet_processor
    jz empty_buffer_notification
    add [processing], 1
    umod [processing], buffer_count
    jmp send
next_buffer:
    add r1, 1
    umod r1, buffer_count
    mov [buffer], r1
    mov r2, r1
    mov r3, r1
    add r2, buffer_start
    add r3, buffer_control_start
    jmp send
packet: .byte 0
buffer: .byte 0
processing: .byte 0
waiting:
