# Alternating Reader
# Alternates between reading data from one device and sending to another. It's
# intended to allow for faster successive read attempts with less waiting
# in-between subsequent reads.
#
# This is intended to be a standalone program that runs indefinitely.
# ----------------------------------Defines----------------------------------
# Define: active:
# As a boolean number indicating whether this should start off reading or wait
# for a notification from the 'read_notifier' port.
#
# Define: read_attempts:
# As the number of successive reads that should take place before waiting to
# send.
# -----------------------------------Ports-----------------------------------
# Port(0): read_notifier:
# Is the port to the device that will send an empty message when this program
# can begin reading, and will receive an empty message indicating when this
# program has finished reading.
#
# Port(1): in:
# Is the port to a device that will be read from. It expects to receive only 1
# byte at a time.
#
# Port(2): out:
# Is the port to a device that will be send to. It sends only 1 byte at a time.
#
# Port(3): switch:
# Is the port to a device that will be receive an empty message indicating
# when this program has finished sending before notifying the 'send_notifier'.
#
# Port(255): send_notifier:
# Is the port to a device that will send an empty message when this program
# can begin sending, and will receive an empty message indicating when this
# program has finished sending.
# ----------------------------------Details----------------------------------
# Program State:
#   1. Polls the 'read_notifier' for a message indicating it can now read.
#
#   2. Repeatedly reads for the amount of times defined by 'read_attempts'.
#
#   3. Notifies the 'read_notifier'.
#
#   4. Polls the 'send_notifier' for a message indicating it can now send.
#
#   5. Sends each successfully read byte in the order they were received.
#
#   6. Notifies 'switch'.
#
#   7. Notifies the 'send_notifier'.
#
# Commonly this program is used in the following system design:
#   +-------------------------------------+
#   |                                     |
#   |                                   out ------------------------------------------------------------------+
#   in         alternating_reader         |                                                                   |
#   |                                switch ----------------------+                                           |
#   |                                     |                       |                                           |
#   +-read_notifier---------send_notifier-+                       |                                           |
#          |                       |                              |                                           |
#   +------a---------+   +---------b------+     +----------------in:0----------------+     +-----------------in:0-------------------+
#   | cross_notifier |   | cross_notifier |     | alternating_source_passthrough_0 out --- switch switchable_source_passthrough_1 out
#   +------b---------+   +---------a------+     +----------------in:1----------------+     +-----------------in:1-------------------+
#          |                       |                              |                                           |
#   +-read_notifier---------send_notifier-+                       |                                           |
#   |                                     |                       |                                           |
#   |                                switch ----------------------+                                           |
#   in         alternating_reader         |                                                                   |
#   |                                   out ------------------------------------------------------------------+
#   |                                     |
#   +-------------------------------------+
#

.port read_notifier, 0
.port in, 1
.port out, 2
.port switch, 3
.port send_notifier, 255

.entrypoint
    mov r3, out
    mov r2, data
    mov r1, read_attempts
    xor r0, !!active * in
    jnz read
wait_read:
    recv r0, [r0]
    jz wait_read
    mov r0, in
read:
    sub r1, 1
    jul wait
    recv r0, [r2]
    jz read
    add r2, 1
    jmp read
wait:
    xor r0, r0
notify_read:
    send r0
    jz notify_read
    not r0
wait_send:
    recv r0, [r0]
    jz wait_send
    mov r0, 1
    mov r1, data
    jmp requires_send
send:
    send r3, r0, [r1]
    jz send
    add r1, 1
requires_send:
    cmp r1, r2
    jul send
    mov r0, switch
notify_switch:
    send r0
    jz notify_switch
    mov r0, send_notifier
notify_send:
    send r0
    jz notify_send
    not r0
    mov r2, data
    mov r1, read_attempts
    jmp wait_read
data:
