# n-Byte Passthrough
# Passes any length of data from one device to the next.
#
# This is intended to be a standalone program that runs indefinitely.
# ----------------------------------Defines----------------------------------
# Define: count:
# As the number of out ports that are available. Maximum this can be is 255.
# -----------------------------------Ports-----------------------------------
# Port(255): in:
# Is the port that data is read from.
#
# Port(0 - 254): out:
# Is the pool of ports data is sent to. Starts at port 0 and goes up to port
# 'count - 1'.
# ----------------------------------Details----------------------------------
# To guarantee efficient passing of data, the program cycles through the out
# ports.
#
# Data should consist of 1 length byte, followed by the number of bytes. This
# structure (including the length byte) is sent to the out port too as one
# single send operation.
#

.define in, 255
.define out, 0

.entrypoint
    mov r0, in
    mov r3, count
receive:
    recv r0, [data]
    jz receive
send:
    add r1, 1
    umod r1, r3
    mov r2, [length]
    send r1, r2, [data]
    jz send
    jmp receive
data:
length: .byte 0
