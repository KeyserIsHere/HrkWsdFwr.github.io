# HTP Packet Decoder
# Decodes HTP (Hashed Transfer Protocol) packets and forwards the decoded
# data to the next device.
#
# This is intended to be a standalone program that runs indefinitely. To
# use it, simply define an 'htp_in' and 'htp_out' for the appropriate ports.
#
# htp_in: Is the port that passes HTP packets to this program.
# It expects to receive only 1 byte at a time. The byte can be any HTP
# packet.
#
# The program can keep track of 5 unique HTP packet sequences at any given
# time. If there is not enough room for the new packet sequence, it will
# either purge an older one, or it will discard the incoming one.
#
# htp_out: Is the port this program will send the decoded data to.
# It will send the full block of data with the structure:
#
#   0 1 2 3 4 5 6 7
#  +-+-+-+-+-+-+-+-+
#  |     Size      |
#  +-+-+-+-+-+-+-+-+
#  |     Data ...
#  +-+-+-+-+-+-+-+-+
#
# Size:  1 byte
#    The size of the data
#
# Data: 1 to 6 bytes
#    The decoded data (of length Size)
#

.define htp_buffer_hash, 0
.define htp_buffer_timestamp, 1
.define htp_buffer_count, 2
.define htp_buffer_data, 3
.define htp_buffer_data_size, 6
.define htp_buffer_size, 9 #htp_buffer_data_size + 3
.define htp_buffer_max, 45 # TODO: htp_buffer_data_size * 5
.define htp_threshold, 8 # TODO: play around with value

.entrypoint
listen:
    recv htp_in, [packet]
    jnz decode_packet
    add r3, htp_buffer_size
    cmp r3, htp_buffer_max
    jul find_complete_buffer
    xor r3, r3
find_complete_buffer:
    mov r1, [buffers + r3 + htp_buffer_hash]
    and r1, 0x80
    jz listen
    mov r2, [buffers + r3 + htp_buffer_count]
    udiv r2, 2
    jmp send_buffer
decode_packet:
    mov r0, [packet]
    mov r1, r0
    and r1, 0x80
    jnz hash_trailing
    # 0hhhdddd
    mov r1, r0
    and r0, 0xf
    shr r1, 4
    jnz hash
    add [counter], 1
    # 00000hhh
    xor r3, r3
find_free_buffer:
    cmp [buffers + r3 + htp_buffer_hash], 0
    jz init_buffer
    add r3, htp_buffer_size
    cmp r3, htp_buffer_max
    jul find_free_buffer
    xor r3, r3
find_old_buffer:
    mov r2, [counter]
    sub r2, [buffers + r3 + htp_buffer_timestamp]
    cmp r2, htp_threshold
    juge init_buffer
    add r3, htp_buffer_size
    cmp r3, htp_buffer_max
    jul find_old_buffer
    jmp listen
init_buffer:
    mov [buffers + r3 + htp_buffer_timestamp], [counter]
    mov [buffers + r3 + htp_buffer_hash], r0
    mov [buffers + r3 + htp_buffer_count], 0
    jmp listen
hash_trailing:
    # 1ddddhhh
    mov r1, r0
    and r1, 7
    shr r0, 3
    and r0, 0xf
    # check end 1dddd000
    cmp r1, 0
    jnz hash
    or r1, 0x80
hash:
    mov r2, [packet]
    umod r2, 7
    add r2, 1
    xor r3, r3
find_buffer:
    cmp r2, [buffers + r3 + htp_buffer_hash]
    jz set_buffer
    add r3, htp_buffer_size
    cmp r3, htp_buffer_max
    jul find_buffer
    jmp listen
set_buffer:
    mov [buffers + r3 + htp_buffer_timestamp], [counter]
    mov [buffers + r3 + htp_buffer_hash], r1
    mov r2, [buffers + r3 + htp_buffer_count]
    and r2, 1
    jnz skip_shift
    shl r0, 4
skip_shift:
    mov r2, [buffers + r3 + htp_buffer_count]
    udiv r2, 2
    add r2, r3
    or [buffers + r2 + htp_buffer_data], r0
    add [buffers + r3 + htp_buffer_count], 1
    and r1, 0x80
    jz listen
    sub r2, r3
    add r2, 1
send_buffer:
    send htp_out, r2, [buffers + r3 + htp_buffer_data]
    jz listen
    mov [buffers + r3 + htp_buffer_hash], 0
    jmp listen
packet: .byte 0
counter: .byte 0
buffers:
