.include types

.define mode, 0

# Registers
.define cursor_x, 0x0
.define cursor_y, 0x1
.define cursor_visibility, 0x2
.define cursor_bounds_x, 0x3
.define cursor_bounds_y, 0x4
.define cursor_bounds_width, 0x5
.define cursor_bounds_height, 0x6
.define cursor_render_advance_x, 0x7
.define cursor_render_advance_y, 0x8
.define cursor_render_advance_width, 0x9
.define cursor_render_height, 0xa
.define cursor_render_wrap_x, 0xb
.define cursor_render_wrap_y, 0xc
.define cursor_render_wrap_width, 0xd
.define cursor_render_wrap_height, 0xe
.define layer, 0xf

.define cursor_render_mode_origin_x, 0x0 | 0x80
.define cursor_render_mode_origin_y, 0x1 | 0x80
.define cursor_render_mode_advance, 0x2 | 0x80
.define cursor_render_mode_wrap, 0x3 | 0x80
.define attributes_palette_page, 0x4 | 0x80
.define attributes_palette_offset, 0x5 | 0x80
.define attributes_style_bold, 0x6 | 0x80
.define attributes_style_italic, 0x7 | 0x80
.define attributes_style_slope, 0x8 | 0x80
.define attributes_animaton_offset, 0x9 | 0x80
.define attributes_animaton_filter, 0xa | 0x80
.define viewport_x, 0xb | 0x80
.define viewport_y, 0xc | 0x80
.define viewport_width, 0xd | 0x80
.define viewport_height, 0xe | 0x80
.define memory, 0xf | 0x80


# Instruction Mode
.macro flip_mode
    nibble 0
    .define mode, !mode
    .savedefine mode
.endm

.macro mode_a
    .if mode
        flip_mode
    .endif
    .save
.endm

.macro mode_b
    .if !mode
        flip_mode
    .endif
    .save
.endm

# Arithmetic
.macro add
    mode_a
    .save
    nibble 1
.endm

.macro sub
    mode_a
    .save
    nibble 2
.endm

.macro mul
    mode_a
    .save
    nibble 3
.endm

.macro mod
    mode_a
    .save
    nibble 4
.endm

.macro div
    mode_a
    .save
    nibble 5
.endm

.macro neg
    mode_a
    .save
    nibble 6
.endm

# Bitwise Operations
.macro and
    mode_b
    .save
    nibble 1
.endm

.macro or
    mode_b
    .save
    nibble 2
.endm

.macro xor
    mode_b
    .save
    nibble 3
.endm

.macro sal
    mode_b
    .save
    nibble 4
.endm

.macro sar
    mode_b
    .save
    nibble 5
.endm

.macro not
    mode_b
    .save
    nibble 6
.endm

# Drawing
.macro drw
    mode_a
    .save
    nibble 7
.endm

.macro ref
    mode_b
    .save
    nibble 7
.endm

# Stack Modifiers
.macro dup
    nibble 8
.endm

.macro bak, x
    nibble 9
    .assert (x >= 1) && (x <= 8), "Can only move the stack back 1 to 8 places"
    nibble -x & 0xf
.endm

.macro fwd, x
    nibble 9
    .assert (x >= 1) && (x <= 8), "Can only move the stack forward 1 to 8 places"
    nibble x - 1
.endm

.macro over
    nibble 10
.endm

.macro swap
    nibble 11
.endm

# Load/Stores
.macro ldi, x
    nibble 12
    nibble x & 0xf
    .if x > 0xf
        ldi 4
        ldi x >> 4
        sal
        or
        .save
    .endif
.endm

.macro ldi, x24, x16, x8, x0
    ldi x0
    .if x8 || x16 || x24
        ldi 8
        ldi x8
        .if x16 || x24
            ldi 8
            ldi x16
            .if x24
                ldi 8
                ldi x24

                sal
                or
            .endif
            sal
            or
        .endif
        sal
        or
    .endif
    .save
.endm

.macro ldr, x
    .if x & 0x80
        mode_b
    .else
        mode_a
    .endif
    .save

    nibble 13
    nibble x & 0xf
.endm

.macro str, x
    .if x & 0x80
        mode_b
    .else
        mode_a
    .endif
    .save

    nibble 14
    nibble x & 0xf
.endm

# Control Flow
.macro rep, count
    nibble 15
    nibble count - 1
    .define mode, 0
    .savedefine mode
.endm

# Extended Logic
.macro advance
    # height
    # width
    # y
    # x
    bak 2
    ldr cursor_render_mode_advance
    rep 16
        fwd 2
        ldr cursor_render_advance_height
        mul
        ldr cursor_render_advance_y
        add
        swap
        ldr cursor_render_advance_width
        mul
        ldr cursor_render_advance_x
        add
        bak 1
        add
        over
        fwd 1
        add
        swap
    .save
.endm

.macro wrap
    # height
    # width
    # y
    # x

    ldr cursor_render_wrap_height
    mul
    ldr cursor_render_wrap_y
    add
    swap
    ldr cursor_render_wrap_width
    mul
    ldr cursor_render_wrap_x
    add

    # width (adjusted)
    # height (adjusted)
    # y
    # x

    bak 1
    swap
    bak 1
    swap
    fwd 2
    swap
    bak 1
    swap
    fwd 1

    # y
    # x
    # width (adjusted)
    # height (adjusted)

    ldi 2
    rep 14
        ldi 1
        rep 16
            over
            dup
            # if (X >= ((int)Cursor->bounds.x + Cursor->bounds.width + 1))
            ldr cursor_bounds_x
            ldr cursor_bounds_width
            add
            sub
            ldi 31
            swap
            sar
            ldi 1
            and

        ldi 1
        rep 14
            swap
            # else if (X < Cursor->bounds.x)
            ldr cursor_bounds_x
            swap
            sub
            ldi 31
            swap
            sar
            ldi 1
            and

        ldr cursor_render_mode_wrap
        rep 3
            # bool
            # bool
            # y
            # x
            # width (adjusted)
            # height (adjusted)
            rep 13
                bak 1
                # X = ((int)Cursor->bounds.x + Cursor->bounds.width) + Cursor->render.wrap.x;
                # Y += height(adjusted);
                over
                bak 3
                over
                fwd 1
                add

                ldr cursor_bounds_x
                ldr cursor_render_wrap_x
                ldr cursor_bounds_width
                add
                add
                swap

                ldi 0
            rep 9
                # X = (int)Cursor->bounds.x + Cursor->render.wrap.x;
                # Y += height(adjusted);
                over
                bak 3
                over
                fwd 1
                add

                # x
                # _
                # y (adjusted)
                # width (adjusted)
                # height (adjusted)

                ldr cursor_bounds_x
                ldr cursor_render_wrap_x
                add
                swap

                # y (adjusted)
                # x (adjusted)
                # width (adjusted)
                # height (adjusted)
            fwd 2

        bak 2

        ldi 1
        rep 15
            dup
            # if (Y >= ((int)Cursor->bounds.y + Cursor->bounds.height + 1))
            ldr cursor_bounds_y
            ldr cursor_bounds_height
            add
            sub
            ldi 31
            swap
            sar
            ldi 1
            and

        ldi 1
        rep 14
            over
            # else if (Y < Cursor->bounds.y)
            ldr cursor_bounds_y
            swap
            sub
            ldi 31
            swap
            sar
            ldi 1
            and

        ldr cursor_render_mode_wrap
        rep 3
            # bool
            # bool
            # y
            # x
            # width (adjusted)
            # height (adjusted)
            rep 12
                bak 1
                # X += width(adjusted);
                # Y = ((int)Cursor->bounds.y + Cursor->bounds.height) + Cursor->render.wrap.y;
                bak 1
                swap
                add
                fwd 1
                swap

                ldr cursor_bounds_y
                ldr cursor_render_wrap_y
                ldr cursor_bounds_height
                add
                add

                ldi 0
            rep 8
                # X += width(adjusted);
                # Y = (int)Cursor->bounds.y + Cursor->render.wrap.y;
                bak 1
                swap
                add
                fwd 1
                swap

                # y
                # x (adjusted)
                # width (adjusted)
                # height (adjusted)

                ldr cursor_bounds_y
                ldr cursor_render_wrap_y
                add
            fwd 2

        bak 2

        # y (adjusted)
        # x (adjusted)
        # width (adjusted)
        # height (adjusted)

    bak 1
    swap
    fwd 1
    swap
    bak 2
    swap
    fwd 1
    swap
    bak 1
    .save
.endm
