(gui "gui-debugger-register"
    (namespace! :debugger-register)
    (state! ".colour" (0 0 0))
    (state! ".change-colour" (255 0 0))
    (state! ".text-alignment" :center)

    (state! ".text" (quote (render-text .rect
        (flatten (text: "r0 = " (colour: .colour)) .font)
        (flatten (text: (format :hex .r0 (compact: #f) (precision: 2)) (colour: (if .r0-modified .change-colour .colour))) .font)
        (flatten (text: "\nr1 = " (colour: .colour)) .font)
        (flatten (text: (format :hex .r1 (compact: #f) (precision: 2)) (colour: (if .r1-modified .change-colour .colour))) .font)
        (flatten (text: "\nr2 = " (colour: .colour)) .font)
        (flatten (text: (format :hex .r2 (compact: #f) (precision: 2)) (colour: (if .r2-modified .change-colour .colour))) .font)
        (flatten (text: "\nr3 = " (colour: .colour)) .font)
        (flatten (text: (format :hex .r3 (compact: #f) (precision: 2)) (colour: (if .r3-modified .change-colour .colour))) .font)
        (flatten (text: "\npc = " (colour: .colour)) .font)
        (flatten (text: (format :hex .pc (compact: #f) (precision: 2)) (colour: (if .pc-modified .change-colour .colour))) .font)
        (flatten (text: "\nflags = " (colour: .colour)) .font)
        (flatten (text: (format :hex .flags (compact: #f) (precision: 2)) (colour: (if .flags-modified .change-colour .colour))) .font)
        (flatten (text: " (o = " (colour: .colour)) .font)
        (flatten (text: (format :dec .overflow-flag) (colour: (if .overflow-flag-modified .change-colour .colour))) .font)
        (flatten (text: ",s = " (colour: .colour)) .font)
        (flatten (text: (format :dec .sign-flag) (colour: (if .sign-flag-modified .change-colour .colour))) .font)
        (flatten (text: ",c = " (colour: .colour)) .font)
        (flatten (text: (format :dec .carry-flag) (colour: (if .carry-flag-modified .change-colour .colour))) .font)
        (flatten (text: ",z = " (colour: .colour)) .font)
        (flatten (text: (format :dec .zero-flag) (colour: (if .zero-flag-modified .change-colour .colour))) .font)
        (flatten (text: ")" (colour: .colour)) .font)
        (align: .text-alignment)
        (wrap: :word :multi)
        (offset: 0)
        (length: :max)
    )) (invalidate: (quote (if (frame-changed?) (any? .pc-changed .r0-changed .r1-changed .r2-changed .r3-changed .flags-changed .rect-changed) #f))))

    (render:
        .text
    )
)
